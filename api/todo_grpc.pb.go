// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TodoServiceClient is the client API for TodoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoServiceClient interface {
	Todos(ctx context.Context, in *TodosRequest, opts ...grpc.CallOption) (TodoService_TodosClient, error)
	Todo(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*TodoResponse, error)
}

type todoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoServiceClient(cc grpc.ClientConnInterface) TodoServiceClient {
	return &todoServiceClient{cc}
}

func (c *todoServiceClient) Todos(ctx context.Context, in *TodosRequest, opts ...grpc.CallOption) (TodoService_TodosClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TodoService_serviceDesc.Streams[0], "/api.TodoService/Todos", opts...)
	if err != nil {
		return nil, err
	}
	x := &todoServiceTodosClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TodoService_TodosClient interface {
	Recv() (*TodosResponse, error)
	grpc.ClientStream
}

type todoServiceTodosClient struct {
	grpc.ClientStream
}

func (x *todoServiceTodosClient) Recv() (*TodosResponse, error) {
	m := new(TodosResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *todoServiceClient) Todo(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*TodoResponse, error) {
	out := new(TodoResponse)
	err := c.cc.Invoke(ctx, "/api.TodoService/Todo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoServiceServer is the server API for TodoService service.
// All implementations must embed UnimplementedTodoServiceServer
// for forward compatibility
type TodoServiceServer interface {
	Todos(*TodosRequest, TodoService_TodosServer) error
	Todo(context.Context, *TodoRequest) (*TodoResponse, error)
	mustEmbedUnimplementedTodoServiceServer()
}

// UnimplementedTodoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTodoServiceServer struct {
}

func (UnimplementedTodoServiceServer) Todos(*TodosRequest, TodoService_TodosServer) error {
	return status.Errorf(codes.Unimplemented, "method Todos not implemented")
}
func (UnimplementedTodoServiceServer) Todo(context.Context, *TodoRequest) (*TodoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Todo not implemented")
}
func (UnimplementedTodoServiceServer) mustEmbedUnimplementedTodoServiceServer() {}

// UnsafeTodoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoServiceServer will
// result in compilation errors.
type UnsafeTodoServiceServer interface {
	mustEmbedUnimplementedTodoServiceServer()
}

func RegisterTodoServiceServer(s *grpc.Server, srv TodoServiceServer) {
	s.RegisterService(&_TodoService_serviceDesc, srv)
}

func _TodoService_Todos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TodosRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TodoServiceServer).Todos(m, &todoServiceTodosServer{stream})
}

type TodoService_TodosServer interface {
	Send(*TodosResponse) error
	grpc.ServerStream
}

type todoServiceTodosServer struct {
	grpc.ServerStream
}

func (x *todoServiceTodosServer) Send(m *TodosResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TodoService_Todo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).Todo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TodoService/Todo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).Todo(ctx, req.(*TodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TodoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.TodoService",
	HandlerType: (*TodoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Todo",
			Handler:    _TodoService_Todo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Todos",
			Handler:       _TodoService_Todos_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/todo.proto",
}
